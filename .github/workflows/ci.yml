name: Node.js CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: postgres:16.4
        env:
          POSTGRES_USER: ${{ secrets.PGUSER }}
          POSTGRES_PASSWORD: ${{ secrets.PGPASSWORD }}
          POSTGRES_DB: ${{ secrets.PGDATABASE }}
        ports:
          - 5432:5432

      redis: # Opcional - Agregar Redis si es necesario en las pruebas
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.6.0

      - name: Setup Node.js
        uses: actions/setup-node@v3.6.0
        with:
          node-version: "20.x"

      - name: Install dependencies
        run: npm install

      # Configurar y verificar variables de entorno
      - name: Setup and Check environment variables
        run: |
          echo "NODE_ENV=test" >> .env
          echo "DATABASE_URL=postgres://${{ secrets.PGUSER }}:${{ secrets.PGPASSWORD }}@localhost:5432/${{ secrets.PGDATABASE }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "REDISCLOUD_URL=redis://localhost:6379" >> .env
          echo "NODE_ENV=test" # Confirma que estamos en modo de prueba
        env:
          NODE_ENV: test
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REDISCLOUD_URL: redis://localhost:6379

      # Esperar a que PostgreSQL esté listo antes de la migración
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -U $PGUSER; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done
        env:
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}

      # Probar conexión a PostgreSQL
      - name: Test PostgreSQL connection
        run: |
          psql -h localhost -p 5432 -U $PGUSER -d $PGDATABASE -c "SELECT 1"
        env:
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}

      # Migrar manualmente la base de datos (crear la tabla users)
      - name: Run database migrations
        run: |
          psql -h localhost -U $PGUSER -d $PGDATABASE -c "
          CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(50) NOT NULL,
            password VARCHAR(100) NOT NULL
          );"
        env:
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}

      # Ejecutar las pruebas
      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REDISCLOUD_URL: redis://localhost:6379

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "machine api.heroku.com" > ~/.netrc
          echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
          echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
          echo "machine git.heroku.com" >> ~/.netrc
          echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
          echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc

      - name: Deploy to Heroku
        run: git push https://git.heroku.com/hiveautomation.git HEAD:master
